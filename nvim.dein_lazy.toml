[[plugins]] # show status line
repo = 'vim-airline/vim-airline'
on_event = "VimEnter"
depends = ['vim-fugitive','coc.nvim']
hook_source = '''
let g:airline#extensions#coc#enabled = 1
set laststatus=2
let g:airline_powerline_fonts = 0
let g:airline#extensions#tabline#enabled = 1
let airline#extensions#coc#error_symbol = 'E:'
let airline#extensions#coc#warning_symbol = 'W:'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
"
let g:airline_symbols.crypt = 'ɦ'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.spell = 'Ꞩ'
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
on_event = 'BufEnter'
hook_post_update = 'TSUpdate'
hook_source = '''
lua << EOF

require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    "bash",
    "c",
    "cmake",
    "comment",
    "cpp",
    "css",
    "dart",
    "diff",
    "dockerfile",
    "git_rebase",
    "go",
    "html",
    "javascript",
    "jq",
    "json",
    "jsonc",
    "latex",
    "lua",
    "make",
    "python",
    "rust",
    "scss",
    "typescript",
    "toml",
    "vim",
    "vue",
    "yaml",
  },

  sync_install = false,
  auto_install = false,
  ignore_install = {},

  highlight = {
    enable = true,
    disable = function(lang, buf)
        local max_filesize = 100 * 1024 -- 100 KB
        local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
        if ok and stats and stats.size > max_filesize then
            return true
        end
    end,

    additional_vim_regex_highlighting = false,
  },
}

EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
on_event = 'BufEnter'
depends = ['nvim-treesitter']

# [[plugins]]
# repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
build = 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build'

[[plugins]]
repo = 'nvim-telescope/telescope-file-browser.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope-symbols.nvim'

[[plugins]]
repo = 'tami5/sqlite.lua'

[[plugins]]
repo = 'nvim-telescope/telescope-frecency.nvim'
depends = ['sqlite.lua']

[[plugins]]
repo = 'fhill2/telescope-ultisnips.nvim'

[[plugins]]
repo = 'fannheyward/telescope-coc.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope-ui-select.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
rev = 'v0.1.*'
depends = [
    # 'nvim-web-devicons',
    'plenary.nvim',
    'telescope-fzf-native.nvim',
    'telescope-file-browser.nvim',
    'telescope-frecency.nvim',
    'telescope-ui-select.nvim',
    'telescope-symbols.nvim',
    'telescope-coc.nvim',
    'telescope-ultisnips.nvim',
]
on_event = 'VimEnter'

hook_add = '''
nnoremap [telescope] <Nop>
nmap <Leader>f [telescope]
nnoremap <silent> [telescope]f :Telescope find_files <CR>
nnoremap <silent> [telescope]F :Telescope find_files no_ignore=true<CR>
nnoremap <silent> [telescope]r :Telescope frecency <CR>
nnoremap <silent> [telescope]g :Telescope live_grep <CR>
nnoremap <silent> [telescope]v :Telescope git_files <CR>
nnoremap <silent> [telescope]b :Telescope buffers <CR>
nnoremap <silent> [telescope]j :Telescope jumplist <CR>
nnoremap <silent> [telescope]t :Telescope filetypes <CR>
nnoremap <silent> [telescope]y :Telescope registers <CR>
nnoremap <silent> [telescope]m :Telescope marks <CR>
nnoremap <silent> [telescope]q :Telescope command_history <CR>
nnoremap <silent> [telescope]n :Telescope find_files cwd=$MY_NOTE_DIR <CR>
nnoremap <silent> [telescope]N :Telescope live_grep cwd=$MY_NOTE_DIR <CR>
" nnoremap <silent> [telescope]o :Telescope treesitter <CR>

nnoremap <silent> [telescope]c :Telescope git_commits <CR>
nnoremap <silent> [telescope]e :lua require('telescope.builtin').symbols{ sources = {'emoji'} } <CR>
nnoremap <silent> [telescope]o :Telescope file_browser <CR>

nnoremap <silent> [telescope]s :SessionManager load_current_dir_session<CR>
nnoremap <silent> [telescope]S :SessionManager load_session<CR>
'''

hook_post_source = '''
lua << EOF

local actions = require("telescope.actions")
local transform_mod = require("telescope.actions.mt").transform_mod
local action_state = require('telescope.actions.state')
local action_layout = require("telescope.actions.layout")
local fb_actions = require("telescope").extensions.file_browser.actions

-- multi open function
local function multiopen(prompt_bufnr, method)
  local edit_file_cmd_map = {
    vertical = "vsplit",
    horizontal = "split",
    tab = "tabedit",
    default = "edit",
  }
  local edit_buf_cmd_map = {
    vertical = "vert sbuffer",
    horizontal = "sbuffer",
    tab = "tab sbuffer",
    default = "buffer",
  }
  local picker = action_state.get_current_picker(prompt_bufnr)
  local multi_selection = picker:get_multi_selection()

  if #multi_selection > 1 then
    require("telescope.pickers").on_close_prompt(prompt_bufnr)
    pcall(vim.api.nvim_set_current_win, picker.original_win_id)

    for i, entry in ipairs(multi_selection) do
      local filename, row, col

      if entry.path or entry.filename then
        filename = entry.path or entry.filename

        row = entry.row or entry.lnum
        col = vim.F.if_nil(entry.col, 1)
      elseif not entry.bufnr then
        local value = entry.value
        if not value then
          return
        end

        if type(value) == "table" then
          value = entry.display
        end

        local sections = vim.split(value, ":")

        filename = sections[1]
        row = tonumber(sections[2])
        col = tonumber(sections[3])
      end

      local entry_bufnr = entry.bufnr

      if entry_bufnr then
        if not vim.api.nvim_buf_get_option(entry_bufnr, "buflisted") then
          vim.api.nvim_buf_set_option(entry_bufnr, "buflisted", true)
        end
        local command = i == 1 and "buffer" or edit_buf_cmd_map[method]
        pcall(vim.cmd, string.format("%s %s", command, vim.api.nvim_buf_get_name(entry_bufnr)))
      else
        local command = i == 1 and "edit" or edit_file_cmd_map[method]
        if vim.api.nvim_buf_get_name(0) ~= filename or command ~= "edit" then
          filename = require("plenary.path"):new(vim.fn.fnameescape(filename)):normalize(vim.loop.cwd())
          pcall(vim.cmd, string.format("%s %s", command, filename))
        end
      end

      if row and col then
        pcall(vim.api.nvim_win_set_cursor, 0, { row, col })
      end
    end
  else
    actions["select_" .. method](prompt_bufnr)
  end
end

local custom_actions = transform_mod({
    multi_selection_open_vertical = function(prompt_bufnr)
        multiopen(prompt_bufnr, "vertical")
    end,
    multi_selection_open_horizontal = function(prompt_bufnr)
        multiopen(prompt_bufnr, "horizontal")
    end,
    multi_selection_open_tab = function(prompt_bufnr)
        multiopen(prompt_bufnr, "tab")
    end,
    multi_selection_open = function(prompt_bufnr)
        multiopen(prompt_bufnr, "default")
    end,
})

local function stopinsert(callback)
    return function(prompt_bufnr)
        vim.cmd.stopinsert()
        vim.schedule(function()
            callback(prompt_bufnr)
        end)
    end
end

local multi_open_mappings = {
  i = {
    ["<C-v>"] = stopinsert(custom_actions.multi_selection_open_vertical),
    ["<C-s>"] = stopinsert(custom_actions.multi_selection_open_horizontal),
    ["<C-t>"] = stopinsert(custom_actions.multi_selection_open_tab),
    ["<CR>"]  = stopinsert(custom_actions.multi_selection_open),
  },
  n = {
    ["<C-v>"] = custom_actions.multi_selection_open_vertical,
    ["<C-s>"] = custom_actions.multi_selection_open_horizontal,
    ["<C-t>"] = custom_actions.multi_selection_open_tab,
    ["<CR>"] = custom_actions.multi_selection_open,
  },
}

require("telescope").setup {
  defaults = {
    mappings = {
      i = {
        ["<C-j>"] = actions.move_selection_next,
        ["<C-k>"] = actions.move_selection_previous,
        ["<C-u>"] = actions.results_scrolling_up,
        ["<C-d>"] = actions.results_scrolling_down,
        ["<C-f>"] = actions.preview_scrolling_down,
        ["<C-b>"] = actions.preview_scrolling_up,
        ["<M-p>"] = action_layout.toggle_preview,
      },
      n = {
        ["j"] = actions.move_selection_next,
        ["k"] = actions.move_selection_previous,
        ["<C-u>"] = actions.results_scrolling_up,
        ["<C-d>"] = actions.results_scrolling_down,
        ["<C-f>"] = actions.preview_scrolling_down,
        ["<C-b>"] = actions.preview_scrolling_up,
        ["<M-p>"] = action_layout.toggle_preview,
      },
    },
    vimgrep_arguments = {
      'rg',
      '--no-heading',
      '--with-filename',
      '--line-number',
      '--column',
      '--hidden',
      '--smart-case',
      '--glob',
      '!**/node_modules/*',
      '--glob',
      '!**/.git/*',
      '--glob',
      '!.gitignore',
      '--glob',
      '!**/.venv/*',
      '--glob',
      '!**/*.lock',
      '--trim',
    },
    file_ignore_patterns = {"^node_modules/", "^./.git/", "^./.venv/"},
  },
  pickers = {
    find_files = {
      find_command = {
        'rg',
        '--files',
        '--hidden',
        '--smart-case',
        '--glob',
        '!**/node_modules/*',
        '--glob',
        '!**/.git/*',
        '--glob',
        '!**/.venv/*',
      },
      mappings = {
        i = {
          ["<C-v>"] = stopinsert(custom_actions.multi_selection_open_vertical),
          ["<C-s>"] = stopinsert(custom_actions.multi_selection_open_horizontal),
          ["<C-t>"] = stopinsert(custom_actions.multi_selection_open_tab),
          ["<CR>"]  = stopinsert(custom_actions.multi_selection_open),
        },
        n = {
          ["<C-v>"] = custom_actions.multi_selection_open_vertical,
          ["<C-s>"] = custom_actions.multi_selection_open_horizontal,
          ["<C-t>"] = custom_actions.multi_selection_open_tab,
          ["<CR>"] = custom_actions.multi_selection_open,
          ["cd"] = function(prompt_bufnr)
            local selection = require("telescope.actions.state").get_selected_entry()
            local dir = vim.fn.fnamemodify(selection.path, ":p:h")
            require("telescope.actions").close(prompt_bufnr)
            vim.cmd(string.format("silent cd %s", dir))
            vim.cmd(":Telescope find_files")
          end
        },
      },
    },
    buffers = {
        sort_mru = true,
        mappings = multi_open_mappings,
    },
    live_grep = {
        mappings = multi_open_mappings,
    },
  },
  extensions = {
    fzf = {
      fuzzy = true,
      override_generic_sorter = true,
      override_file_sorter = true,
      case_mode = "smart_case",
    },
    file_browser = {
      -- theme = "ivy",
      hidden = true,
      hijack_netrw = true,
      mappings = {
        i = {
          ["<C-v>"] = stopinsert(custom_actions.multi_selection_open_vertical),
          ["<C-s>"] = stopinsert(custom_actions.multi_selection_open_horizontal),
          ["<C-t>"] = stopinsert(custom_actions.multi_selection_open_tab),
          ["<CR>"]  = stopinsert(custom_actions.multi_selection_open),
          ["<C-h>"] = fb_actions.goto_parent_dir,
          ["<C-.>"] = fb_actions.toggle_hidden,
          ["<C-p>"] = fb_actions.change_cwd,
        },
        n = {
          ["<C-v>"] = custom_actions.multi_selection_open_vertical,
          ["<C-s>"] = custom_actions.multi_selection_open_horizontal,
          ["<C-t>"] = custom_actions.multi_selection_open_tab,
          ["<CR>"] = custom_actions.multi_selection_open,
          ["h"] = fb_actions.goto_parent_dir,
          ["."] = fb_actions.toggle_hidden,
          ["p"] = fb_actions.change_cwd,
        },
      },
    },
    coc = {
      -- theme = 'ivy',
      prefer_locations = true,
    },
  },
}

require('telescope').load_extension('fzf')
require('telescope').load_extension('frecency')
require('telescope').load_extension('file_browser')
require('telescope').load_extension('ui-select')
require('telescope').load_extension('coc')
require('telescope').load_extension('ultisnips')

EOF
'''

[[plugins]] # enable to do git operation in vim
repo = 'tpope/vim-fugitive'
on_event = 'VimEnter'
hook_add = '''
nnoremap [git]  <Nop>
nmap <Leader>g [git]
nnoremap <silent> [git]s :Git status<CR><C-w>T
nnoremap <silent> [git]a :Git write<CR>
nnoremap <silent> [git]c :Git commit<CR>
nnoremap <silent> [git]b :Git blame<CR>
nnoremap <silent> [git]d :Git diff<CR>
nnoremap <silent> [git]m :Git merge<CR>
'''

[[plugins]] # git-messenger shows message from last commit
repo = 'rhysd/git-messenger.vim'
on_event = 'VimEnter'
hook_add = '''
let g:git_messenger_no_default_mappings=v:true
nnoremap <silent> [git]gm :GitMessenger<CR>
'''

[[plugins]]
repo = 'sindrets/diffview.nvim'
# depends = ['nvim-web-devicons']
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF

require("diffview").setup({
  use_icons = false,
})

EOF

nnoremap <silent> [git]d :DiffviewOpen<CR>
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF

require("gitsigns").setup()

EOF
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = "release"
merged = 0
on_event = 'VimEnter'
hook_add = '''
set nobackup
set nowritebackup
set updatetime=300
set signcolumn=yes

" change completion window behaviors
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

augroup cocfunc
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

  " format settings
  autocmd BufWritePre *.py CocFormatBuf
  "autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')
  autocmd BufWritePre *.go CocFormatBuf

augroup end

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use `:CocFormatBuf` to format current buffer
command! -nargs=0 CocFormatBuf :call CocAction('format')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
set statusline^=%{coc#status()}

" coc keymaps
nmap [coc] <Nop>
map <C-k> [coc]
" nmap <silent> [coc]a :<C-u>CocAction<cr>
nmap <silent> [coc]a     :Telescope coc commands<cr>
nmap <silent> [coc]F :<C-u>CocFormatBuf<cr>
nmap <silent> [coc]f     <Plug>(coc-format-selected)
xmap <silent> [coc]f     <Plug>(coc-format-selected)
nmap <silent> [coc]p     <Plug>(coc-diagnostic-prev)
nmap <silent> [coc]n     <Plug>(coc-diagnostic-next)
nmap <silent> [coc]x     <Plug>(coc-fix-current)
nmap <silent> [coc]d     :<C-u>CocList diagnostics<cr>
" nmap <silent> [coc]d     :Telescope coc diagnostics<cr>
nmap <silent> [coc]r     <Plug>(coc-rename)
nmap <silent> [coc]h     <Plug>(coc-codeaction)
nmap <silent> [coc]o     :<C-u>CocList outline<cr>
nmap <silent> [coc]y     :<C-u>CocList -I symbols<cr>

nmap <silent> [coc]<C-d> :call <SID>show_documentation()<CR>

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gh :call CocAction('doHover')<cr>
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

"imap <C-l> <Plug>(coc-snippets-expand)
"vmap <C-j> <Plug>(coc-snippets-select)
"let g:coc_snippet_next = '<c-j>'
"let g:coc_snippet_prev = '<c-k>'
"imap <C-j> <Plug>(coc-snippets-expand-jump)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
'''

[[plugins]]
repo = 'rlane/pounce.nvim'
on_event = 'VimEnter'
hook_add = '''
noremap [motion] <Nop>
map <S-m> [motion]

nmap [motion] <cmd>Pounce <CR>
vmap [motion] <cmd>Pounce <CR>
omap [motion] <cmd>Pounce <CR>
'''
hook_post_source = '''
lua << EOF

require("pounce").setup({
  accept_keys = "JFKDLSAHGNUVRBYTMICEOXWPQZ",
  accept_best_key = "<enter>",
  multi_window = true,
  debug = false,
})

EOF
'''

[[plugins]]
repo = 'SirVer/ultisnips'
on_event = 'VimEnter'
hook_source = '''
let g:UltiSnipsExpandTrigger = "<C-e>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsSnippetDirectories = ["~/.config/dotfiles/snippets"]

let g:ultisnips_python_syle = "google"
'''

[[plugins]]
repo = 'honza/vim-snippets'
on_event = 'VimEnter'
depends = ['ultisnips']

[[plugins]] # Auto close parentheses
repo = 'cohama/lexima.vim'
on_event = 'VimEnter'
hook_add = '''
"call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'latex'})
"call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'})
"call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'})
'''

[[plugins]] # enable to buffer execution on vim
repo = 'thinca/vim-quickrun'
on_event = 'VimEnter'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
      \ 'runner' : 'vimproc',
      \ 'outputter/buffer/split' : ':botright 8sp',
      \ 'outputter' : 'error',
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error' : 'quickfix',
      \ 'outputter/buffer/close_on_empty' : 1,
      \ }

let g:quickrun_config.rust = {
      \ 'exec' : 'cargo run',
      \ }

let g:quickrun_config.go = {
      \ 'exec' : 'go run .',
      \ }

let g:quickrun_no_default_key_mappings = 1

nnoremap <Leader>r :cclose<CR>:write<CR>:QuickRun<CR>
xnoremap <Leader>r :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>

autocmd FileType qf nnoremap <silent><buffer>q :quit<CR>

" \r: save and execute quickrun (excluding go file type)
" autocmd Filetype * if &ft!="go"|nnoremap <buffer> <Leader>r :cclose<CR>:write<CR>:QuickRun -mode n<CR>|endif

" nnoremap \r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
" xnoremap \r :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>

" C-c: stop quickrun
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "<Leader><C-c>"
'''

[[plugins]] # Neovim/Vim integration for Delve
repo = 'sebdah/vim-delve'
on_event = 'VimEnter'
on_ft = 'go'
hook_add = '''
autocmd FileType go nnoremap <Leader>d :DlvDebug<CR>
autocmd FileType go nnoremap <Leader>p :DlvToggleBreakpoint<CR>
'''

[[plugins]] # get file type for Shougo-san's plugins
repo = 'Shougo/context_filetype.vim'
on_event = 'VimEnter'

[[plugins]] # swhitch buffer file type according to cursor position
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
on_event = 'VimEnter'
hook_add ='''
'''

[[plugins]] # enhance text object
repo = 'tpope/vim-surround'
on_event = 'VimEnter'

[[plugins]] # highlights trailing whitespace
repo = 'bronson/vim-trailing-whitespace'
on_event = 'VimEnter'
hook_add = '''
let g:extra_whitespace_ignored_filetypes = [
            \ 'help',
            \ 'diff',
            \ 'TelescopePrompt',
            \ 'Telescope'
            \ ]
autocmd BufWritePre * :FixWhitespace
'''

[[plugins]] # plugin for alignment words
repo = 'h1mesuke/vim-alignta'
on_event = 'VimEnter'
on_cmd = 'Alignta'

[[plugins]] # a plugin for using web-api in vim
repo = 'mattn/webapi-vim'

[[plugins]] # for using gist services
repo = 'mattn/gist-vim'
depends = ['webapi-vim']
on_cmd = 'Gist'

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF

vim.opt.listchars:append "space:⋅"
vim.opt.listchars:append "eol:↴"

require("indent_blankline").setup {
    space_char_blankline = " ",
    show_end_of_line = true,
    show_current_context = true,
}

EOF
'''

[[plugins]] # auto insert space around '=' & ','
repo = 'kana/vim-smartchr'
on_event = 'InsertCharPre'
hook_add = '''
" inoremap <expr> , smartchr#loop(', ', ',')
" inoremap <expr> . smartchr#loop('.', '. ', '..', '...')
inoremap <expr> = smartchr#loop('=', ' = ', ' == ', ' === ')
" inoremap <expr> ! smartchr#loop('!', '!!', ' != ')
" inoremap <expr> : smartchr#loop(':', '::', ' := ')
" inoremap <expr> + smartchr#loop('+', ' + ', '++')
" inoremap <expr> - smartchr#loop('-', ' - ', '--')
" inoremap <expr> * smartchr#loop('*', ' * ')
" inoremap <expr> / smartchr#loop('/', ' / ', '// ')
" inoremap <expr> & smartchr#loop('&', ' & ', ' && ')
" inoremap <expr> | smartchr#loop('|', ' | ', ' || ')
'''

[[plugins]] # comment out / decomment plugin
repo = 'numToStr/Comment.nvim'
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF

require('Comment').setup({
  mappings = {
    basic = true,
    extra = true,
  }
})

EOF
'''

[[plugins]] # for enabling display & edit binary file in vim
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = 'let g:vinarise_enable_auto_detect = 1'

[[plugins]] # for sorting python file import line, command ':PyImportSort!'
repo = 'tweekmonster/impsort.vim'
on_ft = 'py'
on_cmd = 'PyImportSort'
hook_source = 'let g:impsort_highlight_imported = 0'

[[plugins]] # for url open in browser & search word
repo = 'tyru/open-browser.vim'
on_map = ['<Plug>(openbrowser-smart-search)']
on_event = 'VimEnter'
hook_add = '''
nmap gs <Plug>(openbrowser-smart-search)
vmap gs <Plug>(openbrowser-smart-search)
'''

# [[plugins]] # set syntax highlights and commands for markdown
# repo = 'plasticboy/vim-markdown'
# on_ft = ['markdown','pandoc.markdown','rmd']
# on_event = 'BufEnter'
# hook_add = '''
# let g:vim_markdown_math = 1
# let g:vim_markdown_frontmatter = 1
# let g:vim_markdown_toml_frontmatter = 1
# let g:vim_markdown_json_frontmatter = 1
# let g:vim_markdown_conceal=0
# let g:vim_markdown_folding_disabled=1
# let g:vim_markdown_folding_style_pythonic = 1
# let g:vim_markdown_toc_autofit = 1
#
# autocmd Filetype markdown nnoremap gt :Toc<CR>
# '''

[[plugins]] # for the real-time preview for markdown files
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown','pandoc.markdown','rmd']
build = 'sh -c "cd app && yarn install"'

[[plugins]] # assist table edit on markdown files
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown','pandoc.markdown','rmd']
on_event = 'VimEnter'

[[plugins]] # Automated session manager
repo = 'Shatur/neovim-session-manager'
depends = ['plenary.nvim']
on_event = 'VimEnter'
hook_post_source = '''

lua << EOF

local Path = require('plenary.path')
require('session_manager').setup({
  autoload_mode = require('session_manager.config').AutoloadMode.Disabled, -- Define what to do when Neovim is started without arguments. Possible values: Disabled, CurrentDir, LastSession
  autosave_last_session = true, -- Automatically save last session on exit and on session switch.
  autosave_ignore_not_normal = true, -- Plugin will not save a session when no buffers are opened, or all of them aren't writable or listed.
  autosave_ignore_dirs = {
    "/",
    "~/",
  }, -- A list of directories where the session will not be autosaved.
  autosave_ignore_filetypes = { -- All buffers of these file types will be closed before the session is saved.
    'gitcommit',
  },
  autosave_only_in_session = true, -- Always autosaves session. If true, only autosaves after a session is active.
})

EOF
'''

[[plugins]] # call :Template to get template each file types
repo = 'mattn/sonictemplate-vim'
on_cmd = 'Template'

[[plugins]]
repo = 'glepnir/zephyr-nvim'
on_event = 'VimEnter'

# [[plugins]] # set auto ambiwidth
# repo = 'rbtnn/vim-ambiwidth'
# on_event = 'BufReadPre'

[[plugins]] # EditorConfig
repo = 'editorconfig/editorconfig-vim'
on_event = 'BufReadPre'
on_path = '.*'

[[plugins]] # indent based folding and motion
repo = 'pseewald/vim-anyfold'
on_event = 'BufEnter'
hook_add = '''
filetype plugin indent on
syntax on

" activate anyfold by default
augroup anyfold
    autocmd!
    autocmd Filetype * AnyFoldActivate
augroup END

" disable anyfold for large files
let g:LargeFile = 1000000 " file is large if size greater than 1MB
autocmd BufReadPre,BufRead * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
function LargeFile()
    augroup anyfold
        autocmd! " remove AnyFoldActivate
        autocmd Filetype * setlocal foldmethod=indent " fall back to indent folding
    augroup END
endfunction
" autocmd Filetype * AnyFoldActivate

set foldlevel=20
'''

[[plugins]] # accelerate up-down moving
repo = 'rhysd/accelerated-jk'
on_event = 'BufEnter'
hook_add = '''
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''

[[plugins]] # logging command output
repo = 'tyru/capture.vim'
on_event = 'VimEnter'

