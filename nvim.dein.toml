[[plugins]]
repo = 'Shougo/dein.vim'
rev = 'release'
hook_add = '''
command! DeinUpdate  call s:dein_update()

function! s:dein_update() abort
  call dein#update()
endfunction
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
rev = 'ver10.*'
build = 'make'

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
let g:onedark_color_overrides = {
\ "comment_grey": {"gui": "#67727D", "cterm": "59", "cterm16" : "15"}
\}
let g:airline_theme='onedark'
'''

# configuration wrapper for builtin LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_add = '''
nmap [lsp] <Nop>
map <C-k> [lsp]

lua << EOF

-- Global mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
vim.keymap.set('n', '[lsp]D', vim.diagnostic.open_float)
vim.keymap.set('n', '[lsp]n', vim.diagnostic.goto_prev)
vim.keymap.set('n', '[lsp]p', vim.diagnostic.goto_next)
vim.keymap.set('n', '[lsp]d', vim.diagnostic.setloclist)

-- Use LspAttach autocommand to only map the following keys
-- after the language server attaches to the current buffer
vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', 'gh', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', '[lsp]s', vim.lsp.buf.signature_help, opts)
    -- vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
    -- vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
    -- vim.keymap.set('n', '<space>wl', function()
    --   print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    -- end, opts)
    vim.keymap.set('n', '[lsp]t', vim.lsp.buf.type_definition, opts)
    vim.keymap.set('n', '[lsp]r', vim.lsp.buf.rename, opts)
    vim.keymap.set({ 'n', 'v' }, '[lsp]a', vim.lsp.buf.code_action, opts)
    vim.keymap.set('n', '[lsp]R', vim.lsp.buf.references, opts)
    vim.keymap.set('n', '[lsp]f', function()
      vim.lsp.buf.format { async = true }
    end, opts)
  end,
})

EOF
'''

# plaguin manager for neovim
[[plugins]]
repo = 'williamboman/mason.nvim'
depends = ['nvim-lspconfig']
hook_add = '''
'''

# integrationg nvim-lspconfig and mason
[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['mason.nvim']
hook_add = '''
lua << EOF

local mason = require "mason"
local mason_lspconfig = require "mason-lspconfig"
local lspconfig = require "lspconfig"

local servers = {
    "bashls",
    "clangd",
    "dockerls",
    "gopls",
    "jsonls",
    "lua_ls",
    "tsserver",
    "pyright",
    "rust_analyzer",
    "taplo",
}

mason.setup({
    ui = {
        icons = {
            package_installed = "✓",
            package_pending = "➜",
            package_uninstalled = "✗"
        }
    }
})

mason_lspconfig.setup {
    ensure_installed = servers
}

require("mason-lspconfig").setup_handlers {
    function (server_name) -- default handler (optional)
        require("lspconfig")[server_name].setup {}
    end,
    -- ["rust_analyzer"] = function ()
    --     require("rust-tools").setup {}
    -- end
    -- if use clippy diag, see https://www.reddit.com/r/neovim/comments/nu2w2g/using_clippy_as_linter_for_rust_in/
}

lspconfig.efm.setup {
    init_options = {documentFormatting = true},
    settings = {
        rootMarkers = {".git/"},
        languages = {
            vim = {
                {lintCommand = "vint --enable-neovim --style-problem ${INPUT}", lintFormats = "%f:%l:%c: %m"}
            }
        }
    }
}

EOF
'''

