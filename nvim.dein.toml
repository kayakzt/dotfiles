[[plugins]]
repo = 'Shougo/dein.vim'
rev = '3.1'
hook_add = '''
command! DeinUpdate  call s:dein_update()

function! s:dein_update() abort
  call dein#update()
endfunction
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
rev = 'ver10.*'
build = 'make'

[[plugins]]
repo = 'navarasu/onedark.nvim'
hook_add = '''
lua << EOF

local onedark = require('onedark')

onedark.setup({
    style = 'dark',
    toggle_style_key = nil, -- keybind to toggle theme style. Leave it nil to disable it, or set it to a string, for example "<leader>ts"
    toggle_style_list = {'dark', 'darker', 'warm', 'warmer'}, -- List of styles to toggle between
    code_style = { -- italic, bold, underline, none
        comments = 'italic,bold',
        keywords = 'none',
        functions = 'italic',
        strings = 'none',
        variables = 'none'
    },
    highlights = {
    },
})
onedark.load()

EOF

" Reduce the vividness of eol
hi NonText ctermfg=238 ctermbg=None guifg=#444444 guibg=None
'''

# configuration wrapper for builtin LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_add = '''
nmap [lsp] <Nop>
map <C-k> [lsp]

lua << EOF

vim.diagnostic.config({severity_sort = true})

-- Global mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
-- vim.keymap.set('n', '[lsp]D', vim.diagnostic.open_float)
-- vim.keymap.set('n', '[lsp]n', vim.diagnostic.goto_next)
-- vim.keymap.set('n', '[lsp]p', vim.diagnostic.goto_prev)
-- vim.keymap.set('n', '[lsp]d', vim.diagnostic.setloclist)

-- Use LspAttach autocommand to only map the following keys
-- after the language server attaches to the current buffer
vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
    -- vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
    vim.keymap.set('n', 'gh', vim.lsp.buf.hover, opts)
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
    vim.keymap.set('n', '[lsp]s', vim.lsp.buf.signature_help, opts)
    -- vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
    -- vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
    -- vim.keymap.set('n', '<space>wl', function()
    --   print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    -- end, opts)
    vim.keymap.set('n', '[lsp]t', vim.lsp.buf.type_definition, opts)
    vim.keymap.set('n', '[lsp]r', vim.lsp.buf.rename, opts)
    -- vim.keymap.set({ 'n', 'v' }, '[lsp]a', vim.lsp.buf.code_action, opts)
    vim.keymap.set('n', '[lsp]R', vim.lsp.buf.references, opts)
    vim.keymap.set('n', '[lsp]f', function()
      vim.lsp.buf.format { async = true }
    end, opts)
  end,
})

EOF
'''

# completion plugin
[[plugins]]
repo = 'hrsh7th/nvim-cmp'
depends = ['nvim-lspconfig']

# completion plugin
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
depends = ['nvim-cmp']

# completion plugin
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp-signature-help'
depends = ['nvim-cmp']

# completion plugin
[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
depends = ['nvim-cmp']

# completion plugin
[[plugins]]
repo = 'hrsh7th/cmp-calc'
depends = ['nvim-cmp']

# completion plugin
[[plugins]]
repo = 'hrsh7th/cmp-path'
depends = ['nvim-cmp']

# completion plugin
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
depends = ['nvim-cmp']

# completion plugin
[[plugins]]
repo = 'hrsh7th/cmp-git'
depends = ['nvim-cmp']

# completion plugin
[[plugins]]
repo = 'quangnguyen30192/cmp-nvim-ultisnips'
depends = ['nvim-cmp']

# plaguin manager for neovim
[[plugins]]
repo = 'williamboman/mason.nvim'
depends = ['nvim-lspconfig']

# integrationg nvim-lspconfig and mason
[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
depends = ['mason.nvim', 'cmp-nvim-lsp']
hook_source = '''
lua << EOF

local mason = require "mason"
local mason_lspconfig = require "mason-lspconfig"
local lspconfig = require "lspconfig"
local capabilities = require("cmp_nvim_lsp").default_capabilities()
local cmp = require("cmp")
local cmp_ultisnips_mappings = require("cmp_nvim_ultisnips.mappings")

local servers = {
    "bashls",
    "clangd",
    "dockerls",
    "gopls",
    "jsonls",
    "tsserver",
    "pyright",
    "rust_analyzer",
    "taplo",
    "typos_lsp",
}

mason.setup({
    ui = {
        icons = {
            package_installed = "✓",
            package_pending = "➜",
            package_uninstalled = "✗"
        }
    }
})

mason_lspconfig.setup {
    ensure_installed = servers
}

require("mason-lspconfig").setup_handlers {
    function (server_name) -- default handler (optional)
        lspconfig[server_name].setup {
            capabilities = capabilities,
        }
        lspconfig.pyright.setup {
            settings = {
                python = {
                    venvPath = ".",
                    pythonPath = "./.venv/bin/python",
                    analysis = {
                        extraPaths = {"."},
                    },
                },
            },
        }
        lspconfig.typos_lsp.setup({
            init_options = {
                diagnosticSeverity = "Hint",  -- change warning level
            },
        })
    end,
    -- ["rust_analyzer"] = function ()
    --     require("rust-tools").setup {}
    -- end
    -- if you want to use clippy diagnostic, see https://www.reddit.com/r/neovim/comments/nu2w2g/using_clippy_as_linter_for_rust_in/
}

-- lspconfig.efm.setup {
--     init_options = {documentFormatting = true},
--     settings = {
--         rootMarkers = {".git/"},
--         languages = {
--             vim = {
--                 {lintCommand = "vint --enable-neovim --style-problem ${INPUT}", lintFormats = "%f:%l:%c: %m"}
--             }
--         }
--     }
-- }

cmp.setup({
    snippet = {
        expand = function(args)
            vim.fn["UltiSnips#Anon"](args.body) -- for ultisnip users.
        end,
    },
    mapping = cmp.mapping.preset.insert({
        ['<Tab>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Select }),
        ['<S-Tab>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Select }),
        ['<CR>'] = cmp.mapping.confirm({ select = true }),
        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-e>'] = cmp.mapping(
            function(fallback)
                cmp_ultisnips_mappings.expand_or_jump_forwards(fallback)
            end,
            { "i", "s", --[[ "c" (to enable the mapping in command mode) ]] }
        ),
    }),
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'nvim_lsp_signature_help' },
        { name = 'buffer' },
        { name = 'git' },
        { name = 'path' },
        { name = 'calc' },
        { name = 'ultisnips' },
    })
})

cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
        { name = 'buffer' },
        { name = 'path' },
    }, {
        {
            name = 'cmdline',
            option = {
                ignore_cmds = { 'Man', '!' }
            }
        },
    }
})

cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
        { name = 'path' }
    }, {
        { name = 'cmdline' }
    }),
    matching = { disallow_symbol_nonprefix_matching = false }
})

EOF
'''
