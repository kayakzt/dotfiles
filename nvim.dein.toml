[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
command! DeinUpdate  call s:dein_update()
function! s:dein_update()
  call dein#update()
endfunction
'''

[[plugins]] # show status line
repo = 'vim-airline/vim-airline'
depends = ['vim-fugitive','coc.nvim']
hook_add = '''
let g:airline#extensions#coc#enabled = 1
set laststatus=2
let g:airline_powerline_fonts = 0
let g:airline#extensions#tabline#enabled = 1
let airline#extensions#coc#error_symbol = 'E:'
let airline#extensions#coc#warning_symbol = 'W:'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
"
let g:airline_symbols.crypt = '🔒'		"暗号化されたファイル
let g:airline_symbols.branch = '⭠'		"gitブランチ
let g:airline_symbols.paste = 'ρ'		"ペーストモード
let g:airline_symbols.spell = 'Ꞩ'		"スペルチェック
let g:airline_symbols.notexists = '∄'	"gitで管理されていない場合
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# Syntax

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
on_ft = 'cpp'
hook_add = '''
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
'''

[[plugins]]
repo  = 'neoclide/jsonc.vim'
on_ft = 'jsonc'

[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = 'toml'

# Colors

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
" let g:onedark_termcolors=256
let g:onedark_color_overrides = {
\ "comment_grey": {"gui": "#67727D", "cterm": "59", "cterm16" : "15"}
\}
let g:airline_theme='onedark'
syntax enable
colorscheme onedark
" au MyAutoCmd VimEnter * nested colorscheme onedark
'''

# Completion

# [[plugins]] # completion provider for nvim
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_event = 'InsertEnter'
# hook_add = '''
# let g:deoplete#enable_at_startup = 1
# let g:deoplete#auto_complete_delay = 50
# let g:deoplete#auto_complete_start_length = 1
# let g:deoplete#enable_camel_case = 0
# let g:deoplete#enable_ignore_case = 0
# let g:deoplete#enable_refresh_always = 0
# let g:deoplete#enable_smart_case = 1
# let g:deoplete#file#enable_buffer_path = 1
# let g:deoplete#max_list = 500
#
# autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
#
# inoremap <expr><tab> pumvisible() ? "\<C-n>" :
#   \ neosnippet#expandable_or_jumpable() ?
#   \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
#
# " <TAB>: completion.
# inoremap <silent><expr> <TAB>
#    \ pumvisible() ? "\<C-n>" :
#    \ <SID>check_back_space() ? "\<TAB>" :
#    \ deoplete#manual_complete()
# function! s:check_back_space() abort
#   let col = col('.') - 1
#   return !col || getline('.')[col - 1]  =~ '\s'
# endfunction
#
# " <S-TAB>: completion back.
# inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
#
# " <CR>: close popup and save indent.
# inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
# function! s:my_cr_function() abort
#   return pumvisible() ? deoplete#close_popup()."\<CR>" : "\<CR>"
# endfunction
# '''


# Lint

# [[plugins]]
# repo = 'w0rp/ale'
# hook_add = '''
# " エラー行に表示するマーク
# let g:ale_sign_error = '⨉'
# let g:ale_sign_warning = '!'
# " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
# let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
# " エラー表示の列を常時表示
# let g:ale_sign_column_always = 1
#
# let g:ale_lint_on_enter = 1
# let g:ale_lint_on_save = 1
# " 編集中のlintはしない
# let g:ale_lint_on_text_changed = 'never'
#
# let g:ale_fix_on_save = 1
#
# " lint結果をロケーションリストとQuickFixには表示しない
# " 出てると結構うざいしQuickFixを書き換えられるのは困る
# let g:ale_set_loclist = 0
# let g:ale_set_quickfix = 0
# let g:ale_open_list = 0
# let g:ale_keep_list_window_open = 0
#
# " 有効にするlinter
# let g:ale_linters = {
#\   'sh': ['shellcheck'],
#\   'python': ['flake8'],
#\   'go': ['golangci-lint','golint'],
#\   'javascript': ['eslint'],
#\}
#
# let g:ale_go_golangci_lint_package = 1
# let g:ale_go_golangci_lint_options = ''
#
# let g:ale_fixers = {
#\  'python': ['yapf', 'autopep8'],
#\}
#
# " ALE用プレフィックス
# nmap [ale] <Nop>
# map <C-k> [ale]
# " エラー行にジャンプ
# nmap <silent> [ale]<C-P> <Plug>(ale_previous)
# nmap <silent> [ale]<C-N> <Plug>(ale_next)
# '''

# Others

[[plugins]] # EditorConfig
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'
hook_source = '''
let g:EditorConfig_core_mode = 'python_external'
'''

# [[plugins]] # vim alignment plugin
# repo = 'junegunn/vim-easy-align'
# hook_add = '''
# " Start interactive EasyAlign in visual mode (e.g. vipga)
# xmap ga <Plug>(EasyAlign)
# " Start interactive EasyAlign for a motion/text object (e.g. gaip)
# nmap ga <Plug>(EasyAlign)
# '''

[[plugins]] # indent based folding and motion
repo = 'pseewald/vim-anyfold'
hook_add = '''
filetype plugin indent on
syntax on

" activate anyfold by default
augroup anyfold
    autocmd!
    autocmd Filetype * AnyFoldActivate
augroup END

" disable anyfold for large files
let g:LargeFile = 1000000 " file is large if size greater than 1MB
autocmd BufReadPre,BufRead * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
function LargeFile()
    augroup anyfold
        autocmd! " remove AnyFoldActivate
        autocmd Filetype * setlocal foldmethod=indent " fall back to indent folding
    augroup END
endfunction
" autocmd Filetype * AnyFoldActivate

set foldlevel=20
'''

[[plugins]] # accelerate up-down moving
repo = 'rhysd/accelerated-jk'
hook_add = '''
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''


# [[plugins]] # file manager for vim
# repo = 'cocopon/vaffle.vim'
# hook_add = '''
# '''

# [[plugins]] # showing file tree
# repo = 'scrooloose/nerdtree'
# hook_add = '''
# let NERDTreeShowHidden = 1
# autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
# '''
#
# [[plugins]] # making NERDTree feel like a true panel
# repo = 'jistr/vim-nerdtree-tabs'
# depends = ['nerdtree']
# hook_add = '''
# " if argc() == 0
# "   let g:nerdtree_tabs_open_on_console_startup = 1
# " end
# '''

# [[plugins]] # to showing git status in NERDTree
# repo = 'Xuyuanp/nerdtree-git-plugin'
# depends = ['nerdtree']
# hook_add = '''
# let g:NERDTreeIndicatorMapCustom = {
#     \ "Modified"  : "✹",
#     \ "Staged"    : "✚",
#     \ "Untracked" : "✭",
#     \ "Renamed"   : "➜",
#     \ "Unmerged"  : "",
#     \ "Deleted"   : "✖",
#     \ "Dirty"     : "✗",
#     \ "Clean"     : "✔︎",
#     \ 'Ignored'   : '☒',
#     \ "Unknown"   : "?"
#     \ }
# '''

